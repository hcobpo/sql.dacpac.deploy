# ----------------------------------------------------------------------------------------------------
# Code Scanning Template
# ----------------------------------------------------------------------------------------------------
# GitHub Advanced Security For Azure DevOps
# To enable this, you must enable GHAzDO for this repository in your Azure DevOps Project
# ----------------------------------------------------------------------------------------------------
# Microsoft Secure DevOps Scan
# To enable this, you must add Azure DevOps Extension to your Azure DevOps Organization
# See https://marketplace.visualstudio.com/items?itemName=ms-securitydevops.microsoft-security-devops-azdevops
# ----------------------------------------------------------------------------------------------------
parameters:
- name: environmentName
  default: 'DEV'
- name: runGHASScan
  default: 'false'
- name: runMSDevSecOpsScan
  default: 'false'
- name: appFolderName
  default: ''
- name: appSolutionName
  default: ''
- name: appProjectFolderName
  default: '/src/DirWhereProjLives'
- name: appProjectExtension
  default: 'csproj' # or 'sqlproj' (!)
- name: workingDirectoryInfra
  default: '/infra/bicep'
- name: workingDirectoryIgnore
  default: '/Docs'
- name: continueOnScanError
  default: 'true'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CodeScanDeployment
  displayName: Initialize Code Scans
  environment: ${{ parameters.environmentName }}

# ----------------------------------------------------------------------------------------------------
- ${{ if eq(lower(parameters.runGHASScan), 'true') }}:
  - job: GHASScanJob
    displayName: GHAS Scan Job
    steps:
    # Very basic simple example that might work sometimes...
    # - task: AdvancedSecurity-Codeql-Init@1
    #   inputs:
    #     languages: 'csharp'
    # - task: DotNetCoreCLI@2
    #   inputs:
    #     command: 'restore'
    # - task: AdvancedSecurity-Dependency-Scanning@1
    # - task: AdvancedSecurity-Codeql-Autobuild@1
    # - task: AdvancedSecurity-Codeql-Analyze@1
    # - task: AdvancedSecurity-Publish@1 

    - task: CmdLine@2
      inputs:
        script: |
          echo "parameters.continueOnScanError=${{ parameters.continueOnScanError }}"
          echo "parameters.appProjectFolderName=${{ parameters.appProjectFolderName }}"
          echo "parameters.workingDirectoryInfra=${{ parameters.workingDirectoryInfra }}"
          echo "parameters.workingDirectoryIgnore=${{ parameters.workingDirectoryIgnore }}"
          echo "Project Path: $(Build.SourcesDirectory)\${{ parameters.appProjectFolderName }}\*.{{ parameters.appProjectExtension }}"
          echo "Build.SourcesDirectory=$(Build.SourcesDirectory)"
          echo "------------------------------------------------"
          echo "Directory of Project Files: $(Build.SourcesDirectory)\${{ parameters.appProjectFolderName }}"
          dir $(Build.SourcesDirectory)\${{ parameters.appProjectFolderName }} /s
          echo "------------------------------------------------"
          echo "Directory of Full Staging Directory: $(Build.SourcesDirectory)"
          dir $(Build.SourcesDirectory) /s
      displayName: 'Display Variables and Tree'
      continueOnError: true

    - task: AdvancedSecurity-Codeql-Init@1
      inputs:
        languages: 'csharp'
        querysuite: security-extended
      #   sourcesfolder: ${{ parameters.appProjectFolderName }}
      #   codeqlpathstoinclude: ${{ parameters.appProjectFolderName }}
      #   codeqlpathstoignore: ${{ parameters.workingDirectoryIgnore }}

    - task: DotNetCoreCLI@2
      displayName: 'Restore project'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)\${{ parameters.appProjectFolderName }}\*.${{ parameters.appProjectExtension }}'

    - ${{ if eq(lower(parameters.appProjectExtension), 'csproj') }}:
      - task: DotNetCoreCLI@2
        displayName: Build CS Project
        inputs:
          projects: '$(Build.SourcesDirectory)\${{ parameters.appProjectFolderName }}\*.${{ parameters.appProjectExtension }}'
          arguments: '--output publish_output --configuration Release'

    - ${{ if eq(lower(parameters.appProjectExtension), 'sqlproj') }}:
      - task: VSBuild@1
        displayName: Build DacPac Project
        inputs:
          solution: '${{ parameters.appFolderName }}/${{ parameters.appSolutionName }}.sln'
          platform: 'Any CPU'
          configuration: 'Release'

    - task: AdvancedSecurity-Dependency-Scanning@1
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - ${{ if eq(lower(parameters.appProjectExtension), 'csproj') }}:
      - task: AdvancedSecurity-Codeql-Autobuild@1
        continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - task: AdvancedSecurity-Codeql-Analyze@1
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - task: AdvancedSecurity-Publish@1 
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

# ----------------------------------------------------------------------------------------------------
- ${{ if eq(lower(parameters.runMSDevSecOpsScan), 'true') }}:
  - job: DevSecOpsScanJob
    displayName: DevSecOps Scan Job
    steps:
    # - task: UseDotNet@2
    #   displayName: 'Use dotnet 3.1'
    #   inputs:
    #     version: 3.1.x        
    # - task: UseDotNet@2
    #   displayName: 'Use dotnet 6.0'
    #   inputs:
    #     version: 6.0.x
    - task: UseDotNet@2
      displayName: 'Use dotnet 8.0'
      inputs:
        version: 8.0.x

    - task: MicrosoftSecurityDevOps@1
      displayName: 'Run Microsoft Security DevOps'
      continueOnError: true
